> Task :tabu_search:compileJava
> Task :kqbf:compileJava UP-TO-DATE
> Task :kqbf:processResources NO-SOURCE
> Task :kqbf:classes UP-TO-DATE
> Task :tabu_search:processResources NO-SOURCE
> Task :tabu_search:classes
> Task :tabu_search:jar

> Task :kqbf:run


========== START ==========
initialSolution: SolutionCost {cost: -92, solutionKnapsack: {currentKnapsackWeight: 60, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [17, 1, 4, 5, 8, 9, 14]}}}
Iteration 1: best solution: SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
instance = ../instances/kqbf/kqbf020
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 1.263000 seconds
bestProblemSolution = SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -92, solutionKnapsack: {currentKnapsackWeight: 60, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [17, 1, 4, 5, 8, 9, 14]}}}
Iteration 1: best solution: SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf020
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.447000 seconds
bestProblemSolution = SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf020
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.246000 seconds
bestProblemSolution = SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -92, solutionKnapsack: {currentKnapsackWeight: 60, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [17, 1, 4, 5, 8, 9, 14]}}}
Iteration 1: best solution: SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
Iteration 25: best solution: SolutionCost {cost: -102, solutionKnapsack: {currentKnapsackWeight: 52, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 6, elements: [16, 2, 4, 11, 14, 15]}}}
Iteration 26: best solution: SolutionCost {cost: -120, solutionKnapsack: {currentKnapsackWeight: 54, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [16, 2, 3, 4, 11, 14, 15]}}}
instance = ../instances/kqbf/kqbf020
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.997000 seconds
bestProblemSolution = SolutionCost {cost: -120, solutionKnapsack: {currentKnapsackWeight: 54, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [16, 2, 3, 4, 11, 14, 15]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
Iteration 61: best solution: SolutionCost {cost: -102, solutionKnapsack: {currentKnapsackWeight: 52, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 6, elements: [16, 2, 4, 11, 14, 15]}}}
Iteration 62: best solution: SolutionCost {cost: -120, solutionKnapsack: {currentKnapsackWeight: 54, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [16, 2, 3, 4, 11, 14, 15]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf020
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.476000 seconds
bestProblemSolution = SolutionCost {cost: -120, solutionKnapsack: {currentKnapsackWeight: 54, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [16, 2, 3, 4, 11, 14, 15]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -104, solutionKnapsack: {currentKnapsackWeight: 56, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [16, 2, 3, 4, 6, 11, 12, 14]}}}
Iteration 1: best solution: SolutionCost {cost: -120, solutionKnapsack: {currentKnapsackWeight: 56, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [16, 2, 3, 4, 6, 11, 14, 15]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf020
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.255000 seconds
bestProblemSolution = SolutionCost {cost: -120, solutionKnapsack: {currentKnapsackWeight: 56, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [16, 2, 3, 4, 6, 11, 14, 15]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
instance = ../instances/kqbf/kqbf020
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.043000 seconds
bestProblemSolution = SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -104, solutionKnapsack: {currentKnapsackWeight: 56, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [16, 2, 3, 4, 6, 11, 12, 14]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf020
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.035000 seconds
bestProblemSolution = SolutionCost {cost: -104, solutionKnapsack: {currentKnapsackWeight: 56, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [16, 2, 3, 4, 6, 11, 12, 14]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf020
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.031000 seconds
bestProblemSolution = SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -93, solutionKnapsack: {currentKnapsackWeight: 58, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [0, 17, 1, 4, 8, 9, 14]}}}
Iteration 158: best solution: SolutionCost {cost: -94, solutionKnapsack: {currentKnapsackWeight: 60, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [2, 4, 6, 11, 12, 13, 14]}}}
Iteration 159: best solution: SolutionCost {cost: -102, solutionKnapsack: {currentKnapsackWeight: 62, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [2, 3, 4, 6, 11, 12, 13, 14]}}}
instance = ../instances/kqbf/kqbf020
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.057000 seconds
bestProblemSolution = SolutionCost {cost: -102, solutionKnapsack: {currentKnapsackWeight: 62, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [2, 3, 4, 6, 11, 12, 13, 14]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -92, solutionKnapsack: {currentKnapsackWeight: 60, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [17, 1, 4, 5, 8, 9, 14]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 440: best solution: SolutionCost {cost: -95, solutionKnapsack: {currentKnapsackWeight: 59, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [16, 2, 3, 11, 13, 14, 15]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 443: best solution: SolutionCost {cost: -96, solutionKnapsack: {currentKnapsackWeight: 60, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 7, elements: [2, 3, 4, 11, 13, 14, 15]}}}
Iteration 444: best solution: SolutionCost {cost: -110, solutionKnapsack: {currentKnapsackWeight: 62, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [2, 3, 4, 6, 11, 13, 14, 15]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf020
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.205000 seconds
bestProblemSolution = SolutionCost {cost: -110, solutionKnapsack: {currentKnapsackWeight: 62, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [2, 3, 4, 6, 11, 13, 14, 15]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -104, solutionKnapsack: {currentKnapsackWeight: 56, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [16, 2, 3, 4, 6, 11, 12, 14]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf020
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.035000 seconds
bestProblemSolution = SolutionCost {cost: -104, solutionKnapsack: {currentKnapsackWeight: 56, knapsackCapacity: 64, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14], solution: {size: 8, elements: [16, 2, 3, 4, 6, 11, 12, 14]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
instance = ../instances/kqbf/kqbf040
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 2.660000 seconds
bestProblemSolution = SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 207: best solution: SolutionCost {cost: -247, solutionKnapsack: {currentKnapsackWeight: 135, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [0, 1, 2, 3, 36, 4, 9, 11, 14, 18, 19, 21, 24, 25, 31]}}}
Iteration 208: best solution: SolutionCost {cost: -261, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [0, 32, 1, 2, 3, 36, 4, 9, 11, 14, 18, 19, 21, 24, 25, 31]}}}
Iteration 210: best solution: SolutionCost {cost: -268, solutionKnapsack: {currentKnapsackWeight: 132, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [0, 32, 1, 2, 3, 36, 4, 7, 9, 11, 14, 19, 21, 24, 25, 31]}}}
Iteration 211: best solution: SolutionCost {cost: -281, solutionKnapsack: {currentKnapsackWeight: 138, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [0, 32, 1, 2, 3, 36, 4, 7, 9, 11, 14, 19, 21, 24, 25, 26, 31]}}}
Iteration 213: best solution: SolutionCost {cost: -290, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [0, 32, 1, 33, 2, 3, 36, 4, 9, 11, 14, 19, 21, 24, 25, 26, 31]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf040
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 1.633000 seconds
bestProblemSolution = SolutionCost {cost: -290, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [0, 32, 1, 33, 2, 3, 36, 4, 9, 11, 14, 19, 21, 24, 25, 26, 31]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -201, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [1, 2, 3, 36, 6, 8, 14, 18, 20, 22, 24, 25, 29, 31]}}}
Iteration 1: best solution: SolutionCost {cost: -208, solutionKnapsack: {currentKnapsackWeight: 132, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [1, 2, 3, 36, 6, 8, 14, 18, 20, 22, 23, 24, 29, 31]}}}
Iteration 2: best solution: SolutionCost {cost: -215, solutionKnapsack: {currentKnapsackWeight: 133, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [1, 2, 3, 36, 6, 8, 9, 14, 18, 22, 23, 24, 29, 31]}}}
Iteration 4: best solution: SolutionCost {cost: -231, solutionKnapsack: {currentKnapsackWeight: 126, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 13, elements: [1, 2, 3, 36, 7, 8, 9, 14, 18, 22, 23, 24, 31]}}}
Iteration 5: best solution: SolutionCost {cost: -249, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [1, 2, 34, 3, 36, 7, 8, 9, 14, 18, 22, 23, 24, 31]}}}
Iteration 7: best solution: SolutionCost {cost: -252, solutionKnapsack: {currentKnapsackWeight: 135, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [32, 1, 34, 3, 36, 7, 8, 9, 14, 18, 22, 23, 24, 31]}}}
Iteration 8: best solution: SolutionCost {cost: -260, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [32, 1, 34, 3, 36, 7, 8, 9, 11, 14, 18, 22, 23, 24, 31]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf040
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 1.284000 seconds
bestProblemSolution = SolutionCost {cost: -260, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [32, 1, 34, 3, 36, 7, 8, 9, 11, 14, 18, 22, 23, 24, 31]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
Iteration 26: best solution: SolutionCost {cost: -240, solutionKnapsack: {currentKnapsackWeight: 134, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [1, 2, 3, 36, 4, 37, 8, 11, 14, 17, 18, 19, 20, 21, 24, 25, 28]}}}
Iteration 27: best solution: SolutionCost {cost: -245, solutionKnapsack: {currentKnapsackWeight: 136, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 18, elements: [32, 1, 2, 3, 36, 4, 37, 8, 11, 14, 17, 18, 19, 20, 21, 24, 25, 28]}}}
Iteration 29: best solution: SolutionCost {cost: -256, solutionKnapsack: {currentKnapsackWeight: 136, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 18, elements: [32, 1, 2, 3, 36, 4, 8, 11, 14, 15, 17, 18, 19, 20, 21, 24, 25, 28]}}}
Iteration 299: best solution: SolutionCost {cost: -296, solutionKnapsack: {currentKnapsackWeight: 124, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [32, 33, 34, 4, 36, 7, 9, 11, 12, 15, 19, 21, 24, 31]}}}
Iteration 300: best solution: SolutionCost {cost: -307, solutionKnapsack: {currentKnapsackWeight: 135, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [32, 33, 34, 4, 36, 7, 9, 11, 12, 14, 15, 19, 21, 24, 31]}}}
Iteration 320: best solution: SolutionCost {cost: -308, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [32, 33, 34, 3, 4, 36, 7, 9, 11, 12, 14, 15, 17, 19, 21, 24, 31]}}}
instance = ../instances/kqbf/kqbf040
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 2.707000 seconds
bestProblemSolution = SolutionCost {cost: -308, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [32, 33, 34, 3, 4, 36, 7, 9, 11, 12, 14, 15, 17, 19, 21, 24, 31]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -235, solutionKnapsack: {currentKnapsackWeight: 138, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 13, elements: [1, 2, 3, 36, 7, 8, 14, 18, 19, 22, 23, 24, 31]}}}
Iteration 52: best solution: SolutionCost {cost: -246, solutionKnapsack: {currentKnapsackWeight: 124, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [0, 32, 36, 4, 6, 9, 10, 11, 12, 14, 15, 17, 20, 21, 27, 29]}}}
Iteration 53: best solution: SolutionCost {cost: -264, solutionKnapsack: {currentKnapsackWeight: 136, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [0, 32, 33, 36, 4, 9, 10, 11, 12, 14, 15, 17, 20, 21, 27, 29]}}}
Iteration 54: best solution: SolutionCost {cost: -275, solutionKnapsack: {currentKnapsackWeight: 130, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [0, 32, 33, 3, 36, 4, 9, 11, 12, 14, 15, 17, 20, 21, 27, 29]}}}
Iteration 55: best solution: SolutionCost {cost: -285, solutionKnapsack: {currentKnapsackWeight: 134, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [0, 32, 33, 2, 3, 36, 4, 9, 11, 12, 14, 15, 17, 20, 21, 27, 29]}}}
Iteration 75: best solution: SolutionCost {cost: -290, solutionKnapsack: {currentKnapsackWeight: 133, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 18, elements: [0, 32, 33, 2, 34, 3, 36, 4, 9, 11, 14, 15, 17, 20, 21, 24, 27, 29]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 204: best solution: SolutionCost {cost: -293, solutionKnapsack: {currentKnapsackWeight: 134, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [32, 33, 34, 3, 36, 4, 9, 11, 14, 15, 17, 20, 21, 22, 24, 27, 29]}}}
Iteration 206: best solution: SolutionCost {cost: -296, solutionKnapsack: {currentKnapsackWeight: 135, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [32, 0, 33, 34, 3, 36, 4, 9, 11, 15, 17, 20, 21, 22, 24, 27, 29]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 734: best solution: SolutionCost {cost: -316, solutionKnapsack: {currentKnapsackWeight: 138, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [32, 0, 33, 34, 3, 4, 36, 7, 9, 11, 15, 17, 21, 22, 23, 24, 31]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf040
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 4.774000 seconds
bestProblemSolution = SolutionCost {cost: -316, solutionKnapsack: {currentKnapsackWeight: 138, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [32, 0, 33, 34, 3, 4, 36, 7, 9, 11, 15, 17, 21, 22, 23, 24, 31]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -223, solutionKnapsack: {currentKnapsackWeight: 136, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [32, 1, 2, 3, 36, 37, 8, 11, 14, 18, 19, 20, 21, 24, 25, 29]}}}
Iteration 1: best solution: SolutionCost {cost: -242, solutionKnapsack: {currentKnapsackWeight: 133, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [32, 1, 2, 3, 36, 4, 8, 11, 14, 18, 19, 20, 21, 24, 25, 29]}}}
Iteration 3: best solution: SolutionCost {cost: -249, solutionKnapsack: {currentKnapsackWeight: 127, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [32, 1, 2, 3, 36, 4, 7, 8, 11, 14, 18, 19, 21, 24, 25]}}}
Iteration 4: best solution: SolutionCost {cost: -256, solutionKnapsack: {currentKnapsackWeight: 138, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [32, 1, 2, 3, 36, 4, 7, 8, 11, 14, 18, 19, 21, 23, 24, 25]}}}
Iteration 6: best solution: SolutionCost {cost: -263, solutionKnapsack: {currentKnapsackWeight: 134, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [32, 1, 2, 3, 36, 4, 7, 9, 11, 14, 18, 19, 21, 23, 24, 25]}}}
Iteration 8: best solution: SolutionCost {cost: -276, solutionKnapsack: {currentKnapsackWeight: 129, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 16, elements: [32, 1, 2, 34, 3, 36, 4, 7, 9, 11, 14, 18, 19, 21, 23, 24]}}}
Iteration 9: best solution: SolutionCost {cost: -288, solutionKnapsack: {currentKnapsackWeight: 138, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 17, elements: [32, 1, 2, 34, 3, 36, 4, 7, 9, 11, 14, 18, 19, 21, 23, 24, 28]}}}
Iteration 10: best solution: SolutionCost {cost: -292, solutionKnapsack: {currentKnapsackWeight: 138, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 18, elements: [32, 1, 2, 34, 3, 36, 4, 7, 9, 11, 14, 17, 18, 19, 21, 23, 24, 28]}}}
Iteration 12: best solution: SolutionCost {cost: -303, solutionKnapsack: {currentKnapsackWeight: 132, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 18, elements: [32, 1, 2, 34, 3, 36, 4, 7, 9, 11, 14, 15, 17, 19, 21, 23, 24, 28]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf040
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 1.218000 seconds
bestProblemSolution = SolutionCost {cost: -303, solutionKnapsack: {currentKnapsackWeight: 132, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 18, elements: [32, 1, 2, 34, 3, 36, 4, 7, 9, 11, 14, 15, 17, 19, 21, 23, 24, 28]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -201, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [1, 2, 3, 36, 6, 8, 14, 18, 20, 22, 24, 25, 29, 31]}}}
instance = ../instances/kqbf/kqbf040
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.049000 seconds
bestProblemSolution = SolutionCost {cost: -201, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [1, 2, 3, 36, 6, 8, 14, 18, 20, 22, 24, 25, 29, 31]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf040
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.090000 seconds
bestProblemSolution = SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -243, solutionKnapsack: {currentKnapsackWeight: 138, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [32, 1, 33, 34, 35, 3, 36, 7, 8, 9, 19, 22, 24, 31]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf040
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.195000 seconds
bestProblemSolution = SolutionCost {cost: -243, solutionKnapsack: {currentKnapsackWeight: 138, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 14, elements: [32, 1, 33, 34, 35, 3, 36, 7, 8, 9, 19, 22, 24, 31]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
instance = ../instances/kqbf/kqbf040
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.114000 seconds
bestProblemSolution = SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf040
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.147000 seconds
bestProblemSolution = SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf040
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.224000 seconds
bestProblemSolution = SolutionCost {cost: -239, solutionKnapsack: {currentKnapsackWeight: 137, knapsackCapacity: 138, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15], solution: {size: 15, elements: [1, 2, 3, 36, 37, 7, 8, 11, 14, 18, 19, 21, 24, 25, 28]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -368, solutionKnapsack: {currentKnapsackWeight: 217, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [0, 32, 33, 2, 4, 6, 38, 8, 11, 44, 45, 14, 47, 18, 20, 21, 22, 23, 24, 56, 57, 27, 30]}}}
instance = ../instances/kqbf/kqbf060
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 5.390000 seconds
bestProblemSolution = SolutionCost {cost: -368, solutionKnapsack: {currentKnapsackWeight: 217, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [0, 32, 33, 2, 4, 6, 38, 8, 11, 44, 45, 14, 47, 18, 20, 21, 22, 23, 24, 56, 57, 27, 30]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -452, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [34, 3, 35, 4, 38, 40, 42, 11, 44, 16, 17, 49, 51, 19, 21, 55, 56, 24, 26, 27, 28, 29, 30]}}}
Iteration 1: best solution: SolutionCost {cost: -455, solutionKnapsack: {currentKnapsackWeight: 218, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [34, 3, 35, 4, 38, 42, 11, 44, 16, 17, 49, 51, 19, 21, 53, 55, 56, 24, 26, 27, 28, 29, 30]}}}
Iteration 2: best solution: SolutionCost {cost: -467, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 24, elements: [3, 4, 11, 16, 17, 19, 21, 24, 26, 27, 28, 29, 30, 32, 34, 35, 38, 42, 44, 49, 51, 53, 55, 56]}}}
Iteration 4: best solution: SolutionCost {cost: -480, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 24, elements: [3, 4, 11, 14, 16, 17, 19, 21, 24, 26, 27, 28, 29, 30, 32, 35, 38, 42, 44, 49, 51, 53, 55, 56]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf060
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 4.510000 seconds
bestProblemSolution = SolutionCost {cost: -480, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 24, elements: [3, 4, 11, 14, 16, 17, 19, 21, 24, 26, 27, 28, 29, 30, 32, 35, 38, 42, 44, 49, 51, 53, 55, 56]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -413, solutionKnapsack: {currentKnapsackWeight: 221, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 19, elements: [2, 4, 38, 8, 42, 43, 44, 13, 14, 17, 51, 52, 21, 53, 54, 23, 56, 27, 29]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 203: best solution: SolutionCost {cost: -418, solutionKnapsack: {currentKnapsackWeight: 218, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 18, elements: [35, 4, 38, 8, 42, 43, 44, 14, 17, 51, 52, 21, 53, 54, 23, 56, 27, 29]}}}
Iteration 204: best solution: SolutionCost {cost: -432, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 19, elements: [32, 35, 4, 38, 8, 42, 43, 44, 14, 17, 51, 52, 21, 53, 54, 23, 56, 27, 29]}}}
Iteration 206: best solution: SolutionCost {cost: -434, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 19, elements: [32, 35, 4, 38, 8, 42, 44, 14, 17, 51, 52, 21, 53, 54, 23, 56, 27, 29, 30]}}}
Iteration 208: best solution: SolutionCost {cost: -440, solutionKnapsack: {currentKnapsackWeight: 216, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 19, elements: [32, 35, 4, 8, 42, 44, 14, 17, 51, 52, 21, 53, 54, 23, 56, 26, 27, 29, 30]}}}
Iteration 209: best solution: SolutionCost {cost: -449, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 20, elements: [32, 2, 35, 4, 8, 42, 44, 14, 17, 51, 52, 21, 53, 54, 23, 56, 26, 27, 29, 30]}}}
Iteration 210: best solution: SolutionCost {cost: -450, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 21, elements: [32, 2, 35, 4, 8, 42, 44, 14, 17, 49, 51, 52, 21, 53, 54, 23, 56, 26, 27, 29, 30]}}}
Iteration 212: best solution: SolutionCost {cost: -461, solutionKnapsack: {currentKnapsackWeight: 219, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 21, elements: [32, 2, 35, 4, 8, 42, 44, 14, 17, 49, 51, 52, 53, 54, 23, 56, 24, 26, 27, 29, 30]}}}
Iteration 214: best solution: SolutionCost {cost: -466, solutionKnapsack: {currentKnapsackWeight: 218, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 21, elements: [32, 2, 35, 4, 38, 8, 42, 44, 14, 17, 49, 51, 52, 53, 54, 56, 24, 26, 27, 29, 30]}}}
Iteration 215: best solution: SolutionCost {cost: -475, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 22, elements: [32, 2, 35, 3, 4, 38, 8, 42, 44, 14, 17, 49, 51, 52, 53, 54, 56, 24, 26, 27, 29, 30]}}}
Iteration 217: best solution: SolutionCost {cost: -476, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 22, elements: [32, 2, 35, 3, 4, 38, 8, 44, 14, 17, 49, 51, 52, 53, 54, 56, 24, 26, 27, 29, 30, 31]}}}
Iteration 219: best solution: SolutionCost {cost: -483, solutionKnapsack: {currentKnapsackWeight: 213, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 22, elements: [32, 2, 35, 3, 4, 38, 8, 44, 14, 17, 49, 50, 51, 52, 53, 54, 56, 24, 26, 27, 29, 31]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf060
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 3.904000 seconds
bestProblemSolution = SolutionCost {cost: -483, solutionKnapsack: {currentKnapsackWeight: 213, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 22, elements: [32, 2, 35, 3, 4, 38, 8, 44, 14, 17, 49, 50, 51, 52, 53, 54, 56, 24, 26, 27, 29, 31]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -452, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [34, 3, 35, 4, 38, 40, 42, 11, 44, 16, 17, 49, 51, 19, 21, 55, 56, 24, 26, 27, 28, 29, 30]}}}
Iteration 1: best solution: SolutionCost {cost: -455, solutionKnapsack: {currentKnapsackWeight: 218, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [34, 3, 35, 4, 38, 42, 11, 44, 16, 17, 49, 51, 19, 21, 53, 55, 56, 24, 26, 27, 28, 29, 30]}}}
Iteration 2: best solution: SolutionCost {cost: -467, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 24, elements: [3, 4, 11, 16, 17, 19, 21, 24, 26, 27, 28, 29, 30, 32, 34, 35, 38, 42, 44, 49, 51, 53, 55, 56]}}}
Iteration 4: best solution: SolutionCost {cost: -480, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 24, elements: [3, 4, 11, 14, 16, 17, 19, 21, 24, 26, 27, 28, 29, 30, 32, 35, 38, 42, 44, 49, 51, 53, 55, 56]}}}
Iteration 41: best solution: SolutionCost {cost: -491, solutionKnapsack: {currentKnapsackWeight: 221, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 22, elements: [32, 3, 35, 4, 38, 42, 44, 14, 17, 49, 19, 51, 53, 55, 24, 56, 26, 27, 59, 28, 29, 30]}}}
instance = ../instances/kqbf/kqbf060
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 5.427000 seconds
bestProblemSolution = SolutionCost {cost: -491, solutionKnapsack: {currentKnapsackWeight: 221, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 22, elements: [32, 3, 35, 4, 38, 42, 44, 14, 17, 49, 19, 51, 53, 55, 24, 56, 26, 27, 59, 28, 29, 30]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -397, solutionKnapsack: {currentKnapsackWeight: 215, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 19, elements: [32, 3, 4, 5, 6, 39, 8, 41, 44, 45, 15, 51, 19, 21, 54, 22, 57, 27, 30]}}}
Iteration 1: best solution: SolutionCost {cost: -411, solutionKnapsack: {currentKnapsackWeight: 206, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 19, elements: [32, 3, 4, 5, 6, 39, 8, 41, 44, 45, 15, 51, 19, 21, 22, 57, 27, 28, 30]}}}
Iteration 2: best solution: SolutionCost {cost: -426, solutionKnapsack: {currentKnapsackWeight: 216, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 20, elements: [32, 3, 4, 5, 6, 39, 8, 41, 44, 45, 15, 51, 19, 21, 22, 55, 57, 27, 28, 30]}}}
Iteration 3: best solution: SolutionCost {cost: -432, solutionKnapsack: {currentKnapsackWeight: 216, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 21, elements: [32, 3, 4, 5, 6, 39, 8, 41, 44, 45, 15, 17, 51, 19, 21, 22, 55, 57, 27, 28, 30]}}}
Iteration 5: best solution: SolutionCost {cost: -440, solutionKnapsack: {currentKnapsackWeight: 217, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 21, elements: [32, 3, 4, 5, 6, 39, 8, 41, 44, 45, 15, 17, 51, 19, 21, 22, 23, 57, 27, 28, 30]}}}
Iteration 6: best solution: SolutionCost {cost: -444, solutionKnapsack: {currentKnapsackWeight: 219, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 22, elements: [32, 3, 4, 5, 6, 39, 8, 41, 9, 44, 45, 15, 17, 51, 19, 21, 22, 23, 57, 27, 28, 30]}}}
Iteration 45: best solution: SolutionCost {cost: -446, solutionKnapsack: {currentKnapsackWeight: 219, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 21, elements: [3, 4, 5, 6, 39, 8, 41, 9, 11, 44, 45, 15, 17, 52, 21, 22, 23, 57, 27, 28, 30]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf060
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 5.166000 seconds
bestProblemSolution = SolutionCost {cost: -446, solutionKnapsack: {currentKnapsackWeight: 219, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 21, elements: [3, 4, 5, 6, 39, 8, 41, 9, 11, 44, 45, 15, 17, 52, 21, 22, 23, 57, 27, 28, 30]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -452, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [34, 3, 35, 4, 38, 40, 42, 11, 44, 16, 17, 49, 51, 19, 21, 55, 56, 24, 26, 27, 28, 29, 30]}}}
Iteration 1: best solution: SolutionCost {cost: -455, solutionKnapsack: {currentKnapsackWeight: 218, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [34, 3, 35, 4, 38, 42, 11, 44, 16, 17, 49, 51, 19, 21, 53, 55, 56, 24, 26, 27, 28, 29, 30]}}}
Iteration 2: best solution: SolutionCost {cost: -467, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 24, elements: [3, 4, 11, 16, 17, 19, 21, 24, 26, 27, 28, 29, 30, 32, 34, 35, 38, 42, 44, 49, 51, 53, 55, 56]}}}
Iteration 4: best solution: SolutionCost {cost: -480, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 24, elements: [3, 4, 11, 14, 16, 17, 19, 21, 24, 26, 27, 28, 29, 30, 32, 35, 38, 42, 44, 49, 51, 53, 55, 56]}}}
Iteration 41: best solution: SolutionCost {cost: -491, solutionKnapsack: {currentKnapsackWeight: 221, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 22, elements: [32, 3, 35, 4, 38, 42, 44, 14, 17, 49, 19, 51, 53, 55, 24, 56, 26, 27, 59, 28, 29, 30]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf060
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 5.662000 seconds
bestProblemSolution = SolutionCost {cost: -491, solutionKnapsack: {currentKnapsackWeight: 221, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 22, elements: [32, 3, 35, 4, 38, 42, 44, 14, 17, 49, 19, 51, 53, 55, 24, 56, 26, 27, 59, 28, 29, 30]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -413, solutionKnapsack: {currentKnapsackWeight: 217, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 20, elements: [32, 3, 4, 5, 6, 39, 8, 41, 44, 45, 15, 51, 19, 21, 54, 55, 57, 27, 28, 30]}}}
instance = ../instances/kqbf/kqbf060
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.066000 seconds
bestProblemSolution = SolutionCost {cost: -413, solutionKnapsack: {currentKnapsackWeight: 217, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 20, elements: [32, 3, 4, 5, 6, 39, 8, 41, 44, 45, 15, 51, 19, 21, 54, 55, 57, 27, 28, 30]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -452, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [34, 3, 35, 4, 38, 40, 42, 11, 44, 16, 17, 49, 51, 19, 21, 55, 56, 24, 26, 27, 28, 29, 30]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf060
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.238000 seconds
bestProblemSolution = SolutionCost {cost: -452, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [34, 3, 35, 4, 38, 40, 42, 11, 44, 16, 17, 49, 51, 19, 21, 55, 56, 24, 26, 27, 28, 29, 30]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -406, solutionKnapsack: {currentKnapsackWeight: 221, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 19, elements: [3, 4, 38, 8, 42, 43, 44, 13, 14, 46, 17, 51, 21, 53, 54, 56, 27, 29, 30]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf060
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.715000 seconds
bestProblemSolution = SolutionCost {cost: -406, solutionKnapsack: {currentKnapsackWeight: 221, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 19, elements: [3, 4, 38, 8, 42, 43, 44, 13, 14, 46, 17, 51, 21, 53, 54, 56, 27, 29, 30]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -408, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [32, 33, 34, 2, 3, 4, 5, 38, 39, 42, 11, 44, 45, 16, 17, 51, 21, 22, 55, 56, 26, 27, 28]}}}
instance = ../instances/kqbf/kqbf060
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.163000 seconds
bestProblemSolution = SolutionCost {cost: -408, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [32, 33, 34, 2, 3, 4, 5, 38, 39, 42, 11, 44, 45, 16, 17, 51, 21, 22, 55, 56, 26, 27, 28]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -397, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [33, 34, 3, 4, 9, 41, 11, 12, 44, 45, 16, 49, 17, 18, 19, 21, 22, 23, 24, 57, 26, 28, 30]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf060
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.327000 seconds
bestProblemSolution = SolutionCost {cost: -397, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [33, 34, 3, 4, 9, 41, 11, 12, 44, 45, 16, 49, 17, 18, 19, 21, 22, 23, 24, 57, 26, 28, 30]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -452, solutionKnapsack: {currentKnapsackWeight: 220, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [34, 3, 35, 4, 38, 40, 42, 11, 44, 16, 17, 49, 51, 19, 21, 55, 56, 24, 26, 27, 28, 29, 30]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 240: best solution: SolutionCost {cost: -455, solutionKnapsack: {currentKnapsackWeight: 221, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [3, 35, 4, 38, 40, 42, 11, 44, 16, 17, 49, 51, 19, 21, 53, 55, 56, 24, 26, 27, 28, 29, 30]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf060
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 3.064000 seconds
bestProblemSolution = SolutionCost {cost: -455, solutionKnapsack: {currentKnapsackWeight: 221, knapsackCapacity: 221, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16], solution: {size: 23, elements: [3, 35, 4, 38, 40, 42, 11, 44, 16, 17, 49, 51, 19, 21, 53, 55, 56, 24, 26, 27, 28, 29, 30]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -680, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [65, 2, 3, 4, 69, 7, 8, 11, 75, 77, 15, 17, 18, 20, 23, 25, 29, 31, 32, 35, 36, 42, 47, 48, 50, 53, 54, 59, 61]}}}
Iteration 1: best solution: SolutionCost {cost: -683, solutionKnapsack: {currentKnapsackWeight: 285, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [65, 2, 3, 4, 69, 7, 8, 11, 75, 77, 15, 17, 18, 20, 23, 29, 31, 32, 35, 36, 42, 44, 47, 48, 50, 53, 54, 59, 61]}}}
instance = ../instances/kqbf/kqbf080
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 10.182000 seconds
bestProblemSolution = SolutionCost {cost: -683, solutionKnapsack: {currentKnapsackWeight: 285, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [65, 2, 3, 4, 69, 7, 8, 11, 75, 77, 15, 17, 18, 20, 23, 29, 31, 32, 35, 36, 42, 44, 47, 48, 50, 53, 54, 59, 61]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -650, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 26, elements: [0, 1, 2, 3, 4, 70, 71, 7, 72, 73, 74, 75, 76, 13, 18, 24, 25, 30, 36, 37, 42, 47, 49, 51, 52, 53]}}}
Iteration 1: best solution: SolutionCost {cost: -662, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 26, elements: [0, 1, 2, 3, 4, 70, 71, 7, 72, 73, 74, 75, 13, 18, 23, 24, 25, 30, 36, 37, 42, 47, 49, 51, 52, 53]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf080
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 7.984000 seconds
bestProblemSolution = SolutionCost {cost: -662, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 26, elements: [0, 1, 2, 3, 4, 70, 71, 7, 72, 73, 74, 75, 13, 18, 23, 24, 25, 30, 36, 37, 42, 47, 49, 51, 52, 53]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -692, solutionKnapsack: {currentKnapsackWeight: 285, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 28, elements: [64, 1, 2, 3, 70, 71, 73, 9, 74, 75, 76, 12, 14, 18, 19, 22, 24, 33, 34, 37, 42, 43, 47, 49, 51, 58, 62, 63]}}}
Iteration 1: best solution: SolutionCost {cost: -696, solutionKnapsack: {currentKnapsackWeight: 275, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 28, elements: [64, 1, 2, 3, 70, 71, 73, 9, 74, 75, 76, 12, 14, 19, 22, 24, 33, 34, 37, 42, 43, 47, 49, 51, 55, 58, 62, 63]}}}
Iteration 2: best solution: SolutionCost {cost: -728, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [64, 1, 2, 3, 70, 71, 73, 9, 74, 75, 76, 12, 14, 19, 22, 24, 33, 34, 37, 42, 43, 44, 47, 49, 51, 55, 58, 62, 63]}}}
Iteration 4: best solution: SolutionCost {cost: -734, solutionKnapsack: {currentKnapsackWeight: 285, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [64, 1, 2, 3, 4, 70, 71, 73, 9, 74, 75, 76, 12, 14, 19, 22, 24, 33, 34, 42, 43, 44, 47, 49, 51, 55, 58, 62, 63]}}}
Iteration 5: best solution: SolutionCost {cost: -745, solutionKnapsack: {currentKnapsackWeight: 286, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 30, elements: [64, 1, 2, 3, 4, 70, 71, 73, 9, 74, 75, 76, 12, 14, 19, 20, 22, 24, 33, 34, 42, 43, 44, 47, 49, 51, 55, 58, 62, 63]}}}
Iteration 7: best solution: SolutionCost {cost: -762, solutionKnapsack: {currentKnapsackWeight: 278, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [64, 1, 2, 3, 4, 70, 71, 73, 9, 74, 75, 76, 12, 14, 19, 20, 22, 24, 34, 42, 43, 44, 47, 49, 51, 53, 55, 58, 62]}}}
Iteration 8: best solution: SolutionCost {cost: -780, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 30, elements: [64, 1, 2, 3, 4, 68, 70, 71, 73, 9, 74, 75, 76, 12, 14, 19, 20, 22, 24, 34, 42, 43, 44, 47, 49, 51, 53, 55, 58, 62]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf080
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 7.651000 seconds
bestProblemSolution = SolutionCost {cost: -780, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 30, elements: [64, 1, 2, 3, 4, 68, 70, 71, 73, 9, 74, 75, 76, 12, 14, 19, 20, 22, 24, 34, 42, 43, 44, 47, 49, 51, 53, 55, 58, 62]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -680, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [65, 2, 3, 4, 69, 7, 8, 11, 75, 77, 15, 17, 18, 20, 23, 25, 29, 31, 32, 35, 36, 42, 47, 48, 50, 53, 54, 59, 61]}}}
Iteration 1: best solution: SolutionCost {cost: -683, solutionKnapsack: {currentKnapsackWeight: 285, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [65, 2, 3, 4, 69, 7, 8, 11, 75, 77, 15, 17, 18, 20, 23, 29, 31, 32, 35, 36, 42, 44, 47, 48, 50, 53, 54, 59, 61]}}}
Iteration 48: best solution: SolutionCost {cost: -689, solutionKnapsack: {currentKnapsackWeight: 283, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [65, 2, 3, 4, 69, 7, 8, 74, 11, 75, 77, 13, 15, 18, 20, 23, 31, 32, 35, 36, 42, 44, 47, 48, 50, 53, 54, 59, 61]}}}
Iteration 49: best solution: SolutionCost {cost: -705, solutionKnapsack: {currentKnapsackWeight: 283, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 30, elements: [65, 2, 3, 4, 69, 7, 8, 74, 11, 75, 77, 13, 15, 18, 20, 23, 31, 32, 35, 36, 42, 44, 47, 48, 49, 50, 53, 54, 59, 61]}}}
Iteration 51: best solution: SolutionCost {cost: -748, solutionKnapsack: {currentKnapsackWeight: 280, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [65, 1, 2, 3, 4, 69, 7, 8, 74, 11, 75, 13, 15, 18, 20, 23, 31, 32, 35, 36, 42, 44, 47, 48, 49, 50, 53, 54, 61]}}}
Iteration 52: best solution: SolutionCost {cost: -763, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 30, elements: [65, 1, 2, 3, 4, 69, 7, 71, 8, 74, 11, 75, 13, 15, 18, 20, 23, 31, 32, 35, 36, 42, 44, 47, 48, 49, 50, 53, 54, 61]}}}
Iteration 58: best solution: SolutionCost {cost: -778, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 30, elements: [65, 1, 2, 3, 4, 69, 7, 71, 8, 74, 11, 75, 13, 15, 18, 23, 24, 31, 32, 35, 36, 42, 44, 47, 48, 49, 50, 53, 54, 61]}}}
Iteration 60: best solution: SolutionCost {cost: -783, solutionKnapsack: {currentKnapsackWeight: 285, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 30, elements: [65, 1, 2, 3, 4, 69, 7, 71, 8, 74, 11, 75, 13, 15, 18, 23, 24, 31, 32, 35, 36, 42, 44, 47, 49, 50, 53, 54, 55, 61]}}}
instance = ../instances/kqbf/kqbf080
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 10.318000 seconds
bestProblemSolution = SolutionCost {cost: -783, solutionKnapsack: {currentKnapsackWeight: 285, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 30, elements: [65, 1, 2, 3, 4, 69, 7, 71, 8, 74, 11, 75, 13, 15, 18, 23, 24, 31, 32, 35, 36, 42, 44, 47, 49, 50, 53, 54, 55, 61]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -674, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 27, elements: [64, 1, 2, 3, 69, 71, 9, 74, 75, 12, 13, 18, 19, 23, 24, 31, 36, 37, 42, 44, 46, 47, 48, 54, 58, 60, 62]}}}
Iteration 1: best solution: SolutionCost {cost: -690, solutionKnapsack: {currentKnapsackWeight: 285, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 27, elements: [64, 1, 2, 3, 69, 71, 9, 74, 75, 76, 13, 18, 19, 23, 24, 31, 36, 37, 42, 44, 46, 47, 48, 54, 58, 60, 62]}}}
Iteration 3: best solution: SolutionCost {cost: -707, solutionKnapsack: {currentKnapsackWeight: 286, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 27, elements: [64, 2, 3, 69, 71, 9, 73, 74, 75, 76, 13, 18, 19, 23, 24, 31, 36, 37, 42, 44, 46, 47, 48, 54, 58, 60, 62]}}}
Iteration 4: best solution: SolutionCost {cost: -713, solutionKnapsack: {currentKnapsackWeight: 286, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 28, elements: [64, 2, 3, 69, 71, 9, 73, 74, 75, 76, 13, 18, 19, 23, 24, 31, 36, 37, 42, 44, 46, 47, 48, 49, 54, 58, 60, 62]}}}
Iteration 6: best solution: SolutionCost {cost: -732, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 28, elements: [64, 2, 3, 69, 71, 7, 9, 73, 74, 75, 76, 13, 18, 23, 24, 31, 36, 37, 42, 44, 46, 47, 48, 49, 54, 58, 60, 62]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf080
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 8.769000 seconds
bestProblemSolution = SolutionCost {cost: -732, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 28, elements: [64, 2, 3, 69, 71, 7, 9, 73, 74, 75, 76, 13, 18, 23, 24, 31, 36, 37, 42, 44, 46, 47, 48, 49, 54, 58, 60, 62]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -679, solutionKnapsack: {currentKnapsackWeight: 283, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 25, elements: [65, 2, 3, 4, 5, 7, 8, 10, 11, 75, 13, 77, 78, 15, 16, 18, 23, 25, 30, 31, 35, 42, 48, 54, 59]}}}
Iteration 1: best solution: SolutionCost {cost: -702, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 25, elements: [65, 2, 3, 4, 5, 7, 8, 10, 11, 75, 13, 77, 78, 15, 16, 18, 23, 25, 31, 35, 42, 48, 54, 59, 61]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf080
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 6.590000 seconds
bestProblemSolution = SolutionCost {cost: -702, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 25, elements: [65, 2, 3, 4, 5, 7, 8, 10, 11, 75, 13, 77, 78, 15, 16, 18, 23, 25, 31, 35, 42, 48, 54, 59, 61]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -667, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 28, elements: [64, 65, 2, 3, 4, 5, 7, 8, 11, 13, 15, 18, 20, 23, 25, 31, 32, 35, 36, 37, 38, 42, 47, 48, 49, 50, 53, 54]}}}
instance = ../instances/kqbf/kqbf080
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.089000 seconds
bestProblemSolution = SolutionCost {cost: -667, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 28, elements: [64, 65, 2, 3, 4, 5, 7, 8, 11, 13, 15, 18, 20, 23, 25, 31, 32, 35, 36, 37, 38, 42, 47, 48, 49, 50, 53, 54]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -674, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 27, elements: [64, 1, 2, 3, 69, 71, 9, 74, 75, 12, 13, 18, 19, 23, 24, 31, 36, 37, 42, 44, 46, 47, 48, 54, 58, 60, 62]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf080
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.513000 seconds
bestProblemSolution = SolutionCost {cost: -674, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 27, elements: [64, 1, 2, 3, 69, 71, 9, 74, 75, 12, 13, 18, 19, 23, 24, 31, 36, 37, 42, 44, 46, 47, 48, 54, 58, 60, 62]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -680, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [65, 2, 3, 4, 69, 7, 8, 11, 75, 77, 15, 17, 18, 20, 23, 25, 29, 31, 32, 35, 36, 42, 47, 48, 50, 53, 54, 59, 61]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf080
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 2.313000 seconds
bestProblemSolution = SolutionCost {cost: -680, solutionKnapsack: {currentKnapsackWeight: 288, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 29, elements: [65, 2, 3, 4, 69, 7, 8, 11, 75, 77, 15, 17, 18, 20, 23, 25, 29, 31, 32, 35, 36, 42, 47, 48, 50, 53, 54, 59, 61]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -692, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 26, elements: [64, 1, 2, 3, 69, 71, 9, 73, 75, 76, 13, 18, 19, 23, 24, 31, 36, 37, 42, 46, 47, 48, 54, 58, 60, 62]}}}
instance = ../instances/kqbf/kqbf080
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.273000 seconds
bestProblemSolution = SolutionCost {cost: -692, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 26, elements: [64, 1, 2, 3, 69, 71, 9, 73, 75, 76, 13, 18, 19, 23, 24, 31, 36, 37, 42, 46, 47, 48, 54, 58, 60, 62]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -692, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 26, elements: [64, 1, 2, 3, 69, 71, 9, 73, 75, 76, 13, 18, 19, 23, 24, 31, 36, 37, 42, 46, 47, 48, 54, 58, 60, 62]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf080
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 0.649000 seconds
bestProblemSolution = SolutionCost {cost: -692, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 26, elements: [64, 1, 2, 3, 69, 71, 9, 73, 75, 76, 13, 18, 19, 23, 24, 31, 36, 37, 42, 46, 47, 48, 54, 58, 60, 62]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -692, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 26, elements: [64, 1, 2, 3, 69, 71, 9, 73, 75, 76, 13, 18, 19, 23, 24, 31, 36, 37, 42, 46, 47, 48, 54, 58, 60, 62]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf080
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 2.205000 seconds
bestProblemSolution = SolutionCost {cost: -692, solutionKnapsack: {currentKnapsackWeight: 287, knapsackCapacity: 288, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10], solution: {size: 26, elements: [64, 1, 2, 3, 69, 71, 9, 73, 75, 76, 13, 18, 19, 23, 24, 31, 36, 37, 42, 46, 47, 48, 54, 58, 60, 62]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -997, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 66, 3, 68, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 89, 27, 93, 29, 95, 96, 36, 39, 42, 44, 51, 53, 56, 62, 63]}}}
Iteration 0: best solution: SolutionCost {cost: -998, solutionKnapsack: {currentKnapsackWeight: 342, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 33, elements: [2, 66, 3, 68, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 89, 27, 93, 29, 95, 96, 39, 42, 44, 51, 53, 56, 62, 63]}}}
Iteration 2: best solution: SolutionCost {cost: -1022, solutionKnapsack: {currentKnapsackWeight: 334, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 33, elements: [2, 66, 3, 68, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 89, 93, 29, 95, 96, 39, 42, 44, 51, 53, 56, 57, 62, 63]}}}
Iteration 3: best solution: SolutionCost {cost: -1046, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 66, 3, 68, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 89, 93, 29, 95, 96, 38, 39, 42, 44, 51, 53, 56, 57, 62, 63]}}}
Iteration 5: best solution: SolutionCost {cost: -1062, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 66, 3, 68, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 89, 91, 93, 29, 95, 96, 38, 39, 42, 44, 51, 56, 57, 62, 63]}}}
Iteration 7: best solution: SolutionCost {cost: -1081, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 66, 3, 68, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 85, 22, 23, 89, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 51, 56, 57, 62, 63]}}}
Iteration 9: best solution: SolutionCost {cost: -1099, solutionKnapsack: {currentKnapsackWeight: 330, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 66, 3, 68, 69, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 22, 23, 89, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 51, 56, 57, 62, 63]}}}
Iteration 10: best solution: SolutionCost {cost: -1116, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 35, elements: [1, 2, 66, 3, 68, 69, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 22, 23, 89, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 51, 56, 57, 62, 63]}}}
Iteration 11: best solution: SolutionCost {cost: -1131, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [1, 2, 66, 3, 68, 69, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 22, 23, 89, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 49, 51, 56, 57, 62, 63]}}}
Iteration 13: best solution: SolutionCost {cost: -1140, solutionKnapsack: {currentKnapsackWeight: 343, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [1, 2, 66, 3, 68, 69, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 22, 23, 89, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 14: best solution: SolutionCost {cost: -1166, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [1, 2, 66, 3, 68, 69, 7, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 21, 22, 23, 89, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 16: best solution: SolutionCost {cost: -1171, solutionKnapsack: {currentKnapsackWeight: 338, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [1, 2, 66, 3, 68, 69, 7, 9, 10, 74, 14, 78, 17, 82, 18, 84, 21, 22, 23, 24, 89, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 17: best solution: SolutionCost {cost: -1195, solutionKnapsack: {currentKnapsackWeight: 340, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [1, 2, 66, 3, 68, 69, 7, 9, 10, 74, 14, 78, 17, 82, 18, 84, 21, 22, 23, 24, 89, 91, 93, 29, 95, 96, 32, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 18: best solution: SolutionCost {cost: -1217, solutionKnapsack: {currentKnapsackWeight: 343, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 39, elements: [1, 2, 66, 3, 68, 69, 7, 9, 10, 74, 14, 78, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 96, 32, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 20: best solution: SolutionCost {cost: -1220, solutionKnapsack: {currentKnapsackWeight: 341, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 39, elements: [1, 2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 29, 95, 96, 32, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
instance = ../instances/kqbf/kqbf100
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 17.558000 seconds
bestProblemSolution = SolutionCost {cost: -1220, solutionKnapsack: {currentKnapsackWeight: 341, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 39, elements: [1, 2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 29, 95, 96, 32, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -850, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 33, elements: [1, 65, 2, 3, 68, 4, 69, 70, 9, 10, 74, 12, 13, 79, 16, 17, 81, 19, 84, 85, 23, 27, 30, 97, 34, 35, 36, 41, 45, 51, 53, 59, 61]}}}
Iteration 0: best solution: SolutionCost {cost: -859, solutionKnapsack: {currentKnapsackWeight: 330, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 32, elements: [1, 65, 2, 3, 68, 4, 69, 70, 9, 10, 74, 12, 79, 16, 17, 81, 19, 84, 85, 23, 27, 30, 97, 34, 35, 36, 41, 45, 51, 53, 59, 61]}}}
Iteration 1: best solution: SolutionCost {cost: -879, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 33, elements: [1, 65, 2, 3, 68, 4, 69, 70, 7, 9, 10, 74, 12, 79, 16, 17, 81, 19, 84, 85, 23, 27, 30, 97, 34, 35, 36, 41, 45, 51, 53, 59, 61]}}}
Iteration 3: best solution: SolutionCost {cost: -883, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 33, elements: [1, 65, 2, 3, 68, 4, 69, 70, 7, 9, 10, 74, 12, 79, 16, 17, 81, 19, 84, 85, 23, 27, 30, 97, 34, 36, 41, 42, 45, 51, 53, 59, 61]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 210: best solution: SolutionCost {cost: -892, solutionKnapsack: {currentKnapsackWeight: 343, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 79, 16, 17, 81, 19, 84, 85, 23, 27, 30, 97, 36, 41, 44, 45, 51, 53, 59, 61, 63]}}}
Iteration 212: best solution: SolutionCost {cost: -920, solutionKnapsack: {currentKnapsackWeight: 341, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 79, 15, 16, 17, 81, 19, 84, 85, 23, 27, 30, 97, 36, 41, 44, 45, 51, 53, 61, 63]}}}
Iteration 214: best solution: SolutionCost {cost: -951, solutionKnapsack: {currentKnapsackWeight: 335, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 79, 15, 16, 17, 81, 19, 84, 85, 23, 27, 30, 97, 36, 44, 45, 51, 53, 61, 62, 63]}}}
Iteration 215: best solution: SolutionCost {cost: -991, solutionKnapsack: {currentKnapsackWeight: 341, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 35, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 79, 15, 16, 17, 81, 19, 84, 85, 23, 27, 30, 96, 97, 36, 44, 45, 51, 53, 61, 62, 63]}}}
Iteration 217: best solution: SolutionCost {cost: -1007, solutionKnapsack: {currentKnapsackWeight: 338, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 35, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 79, 15, 16, 17, 81, 19, 84, 85, 23, 25, 30, 96, 97, 36, 44, 45, 51, 53, 61, 62, 63]}}}
Iteration 218: best solution: SolutionCost {cost: -1030, solutionKnapsack: {currentKnapsackWeight: 337, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 35, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 79, 15, 16, 17, 81, 19, 84, 85, 23, 24, 25, 30, 96, 97, 44, 45, 51, 53, 61, 62, 63]}}}
Iteration 219: best solution: SolutionCost {cost: -1055, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 79, 15, 16, 17, 81, 19, 84, 85, 23, 24, 25, 28, 30, 96, 97, 44, 45, 51, 53, 61, 62, 63]}}}
Iteration 221: best solution: SolutionCost {cost: -1065, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 14, 79, 15, 16, 17, 81, 19, 85, 23, 24, 25, 28, 30, 96, 97, 44, 45, 51, 53, 61, 62, 63]}}}
Iteration 223: best solution: SolutionCost {cost: -1072, solutionKnapsack: {currentKnapsackWeight: 339, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 14, 79, 15, 16, 17, 81, 19, 85, 23, 24, 25, 28, 30, 96, 97, 98, 44, 45, 51, 61, 62, 63]}}}
Iteration 224: best solution: SolutionCost {cost: -1085, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [2, 3, 68, 4, 69, 70, 7, 71, 72, 9, 10, 74, 11, 12, 14, 79, 15, 16, 17, 81, 19, 85, 23, 24, 25, 28, 30, 96, 97, 98, 44, 45, 50, 51, 61, 62, 63]}}}
Iteration 226: best solution: SolutionCost {cost: -1095, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [2, 3, 68, 4, 69, 7, 71, 72, 9, 10, 74, 11, 12, 14, 79, 15, 16, 17, 81, 19, 85, 23, 24, 25, 28, 30, 31, 96, 97, 98, 44, 45, 50, 51, 61, 62, 63]}}}
Iteration 228: best solution: SolutionCost {cost: -1098, solutionKnapsack: {currentKnapsackWeight: 338, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [2, 3, 68, 4, 69, 7, 71, 72, 9, 10, 74, 11, 14, 79, 15, 16, 17, 81, 19, 85, 23, 24, 88, 25, 28, 30, 31, 96, 97, 98, 44, 45, 50, 51, 61, 62, 63]}}}
Iteration 229: best solution: SolutionCost {cost: -1116, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [2, 3, 68, 4, 69, 7, 71, 72, 9, 10, 74, 11, 14, 79, 15, 16, 17, 81, 19, 85, 23, 24, 88, 25, 28, 30, 31, 95, 96, 97, 98, 44, 45, 50, 51, 61, 62, 63]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf100
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 15.455000 seconds
bestProblemSolution = SolutionCost {cost: -1116, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [2, 3, 68, 4, 69, 7, 71, 72, 9, 10, 74, 11, 14, 79, 15, 16, 17, 81, 19, 85, 23, 24, 88, 25, 28, 30, 31, 95, 96, 97, 98, 44, 45, 50, 51, 61, 62, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -979, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [0, 64, 2, 67, 69, 6, 71, 7, 9, 73, 10, 75, 13, 16, 17, 20, 84, 21, 23, 88, 26, 90, 27, 91, 92, 94, 96, 33, 34, 40, 44, 45, 54, 59, 61, 63]}}}
Iteration 1: best solution: SolutionCost {cost: -1010, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [0, 64, 2, 67, 69, 6, 71, 7, 72, 9, 73, 10, 75, 13, 16, 17, 20, 84, 21, 23, 88, 26, 90, 91, 92, 94, 96, 33, 34, 40, 44, 45, 54, 59, 61, 63]}}}
Iteration 3: best solution: SolutionCost {cost: -1033, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [0, 64, 2, 67, 69, 6, 71, 7, 72, 9, 73, 10, 75, 13, 16, 17, 20, 84, 21, 23, 88, 26, 90, 91, 92, 94, 96, 33, 34, 44, 45, 48, 54, 59, 61, 63]}}}
Iteration 5: best solution: SolutionCost {cost: -1042, solutionKnapsack: {currentKnapsackWeight: 343, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [0, 64, 2, 67, 69, 6, 71, 7, 72, 9, 73, 10, 75, 13, 15, 16, 17, 20, 84, 21, 23, 88, 26, 90, 91, 92, 94, 96, 33, 34, 44, 45, 48, 54, 61, 63]}}}
Iteration 6: best solution: SolutionCost {cost: -1055, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [0, 64, 2, 67, 69, 6, 71, 7, 72, 9, 73, 10, 75, 13, 15, 16, 17, 83, 20, 84, 21, 23, 88, 26, 90, 91, 92, 94, 96, 33, 34, 44, 45, 48, 54, 61, 63]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 202: best solution: SolutionCost {cost: -1061, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [64, 2, 67, 69, 6, 71, 7, 72, 9, 73, 10, 75, 12, 13, 15, 16, 17, 83, 20, 84, 21, 23, 88, 26, 90, 91, 92, 94, 96, 33, 34, 44, 45, 48, 54, 61, 63]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
Iteration 572: best solution: SolutionCost {cost: -1074, solutionKnapsack: {currentKnapsackWeight: 337, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 39, elements: [2, 67, 68, 69, 6, 71, 7, 72, 9, 10, 75, 15, 79, 16, 17, 20, 84, 21, 22, 23, 87, 24, 25, 90, 91, 92, 28, 93, 94, 95, 96, 33, 38, 44, 45, 47, 50, 62, 63]}}}
Iteration 573: best solution: SolutionCost {cost: -1084, solutionKnapsack: {currentKnapsackWeight: 339, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 40, elements: [2, 67, 68, 69, 6, 71, 7, 72, 9, 10, 75, 11, 15, 79, 16, 17, 20, 84, 21, 22, 23, 87, 24, 25, 90, 91, 92, 28, 93, 94, 95, 96, 33, 38, 44, 45, 47, 50, 62, 63]}}}
Iteration 575: best solution: SolutionCost {cost: -1099, solutionKnapsack: {currentKnapsackWeight: 343, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 40, elements: [2, 67, 68, 69, 6, 71, 7, 72, 9, 10, 75, 11, 15, 79, 16, 17, 20, 84, 21, 22, 23, 24, 25, 90, 91, 92, 28, 93, 94, 95, 96, 33, 38, 44, 45, 47, 50, 57, 62, 63]}}}
Iteration 576: best solution: SolutionCost {cost: -1116, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [2, 67, 68, 69, 6, 71, 7, 72, 9, 10, 74, 75, 11, 15, 79, 16, 17, 20, 84, 21, 22, 23, 24, 25, 90, 91, 92, 28, 93, 94, 95, 96, 33, 38, 44, 45, 47, 50, 57, 62, 63]}}}
Iteration 578: best solution: SolutionCost {cost: -1134, solutionKnapsack: {currentKnapsackWeight: 342, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [2, 67, 68, 69, 6, 71, 7, 72, 9, 10, 74, 75, 11, 14, 15, 79, 16, 17, 20, 84, 21, 22, 23, 24, 25, 90, 91, 92, 28, 93, 95, 96, 33, 38, 44, 45, 47, 50, 57, 62, 63]}}}
Iteration 580: best solution: SolutionCost {cost: -1159, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [2, 67, 68, 69, 6, 71, 7, 72, 9, 10, 74, 75, 11, 14, 15, 79, 16, 17, 20, 21, 22, 23, 24, 25, 90, 91, 92, 28, 93, 30, 95, 96, 33, 38, 44, 45, 47, 50, 57, 62, 63]}}}
Iteration 582: best solution: SolutionCost {cost: -1177, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [2, 68, 69, 6, 71, 7, 72, 9, 10, 74, 75, 11, 14, 15, 79, 16, 17, 20, 21, 22, 23, 24, 25, 90, 91, 92, 28, 93, 30, 95, 96, 33, 98, 38, 44, 45, 47, 50, 57, 62, 63]}}}
Iteration 584: best solution: SolutionCost {cost: -1190, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [2, 68, 69, 6, 71, 7, 72, 9, 10, 74, 11, 14, 15, 79, 16, 17, 20, 21, 22, 23, 24, 25, 90, 91, 92, 28, 93, 30, 95, 96, 33, 98, 38, 44, 45, 47, 50, 51, 57, 62, 63]}}}
Iteration 586: best solution: SolutionCost {cost: -1192, solutionKnapsack: {currentKnapsackWeight: 341, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [2, 68, 69, 6, 71, 7, 72, 9, 10, 74, 11, 77, 14, 15, 79, 16, 17, 20, 21, 22, 23, 24, 25, 90, 91, 92, 28, 93, 30, 95, 96, 33, 98, 38, 44, 45, 50, 51, 57, 62, 63]}}}
Iteration 588: best solution: SolutionCost {cost: -1193, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [2, 68, 69, 6, 71, 7, 72, 9, 10, 74, 11, 77, 14, 15, 79, 16, 17, 20, 21, 22, 23, 24, 25, 90, 92, 28, 93, 30, 95, 31, 96, 33, 98, 38, 44, 45, 50, 51, 57, 62, 63]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf100
localSearch = BEST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 130.585000 seconds
bestProblemSolution = SolutionCost {cost: -1193, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [2, 68, 69, 6, 71, 7, 72, 9, 10, 74, 11, 77, 14, 15, 79, 16, 17, 20, 21, 22, 23, 24, 25, 90, 92, 28, 93, 30, 95, 31, 96, 33, 98, 38, 44, 45, 50, 51, 57, 62, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -1128, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [64, 3, 68, 7, 71, 74, 10, 11, 14, 80, 17, 18, 21, 22, 23, 24, 89, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 39, 43, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 1: best solution: SolutionCost {cost: -1160, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [64, 3, 68, 7, 71, 74, 10, 11, 14, 17, 18, 21, 22, 23, 24, 89, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 39, 43, 44, 47, 49, 51, 52, 57, 62, 63]}}}
Iteration 3: best solution: SolutionCost {cost: -1191, solutionKnapsack: {currentKnapsackWeight: 339, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [64, 3, 68, 7, 71, 74, 10, 11, 14, 78, 17, 18, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 31, 32, 96, 33, 38, 39, 43, 44, 47, 49, 51, 52, 57, 62, 63]}}}
Iteration 4: best solution: SolutionCost {cost: -1213, solutionKnapsack: {currentKnapsackWeight: 343, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [64, 2, 3, 68, 7, 71, 74, 10, 11, 14, 78, 17, 18, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 31, 32, 96, 33, 38, 39, 43, 44, 47, 49, 51, 52, 57, 62, 63]}}}
Iteration 6: best solution: SolutionCost {cost: -1224, solutionKnapsack: {currentKnapsackWeight: 343, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [64, 2, 3, 68, 7, 71, 74, 10, 11, 14, 78, 17, 18, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 31, 32, 96, 37, 38, 39, 43, 44, 47, 49, 51, 52, 57, 62, 63]}}}
Iteration 8: best solution: SolutionCost {cost: -1227, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [64, 2, 3, 68, 7, 71, 74, 10, 11, 14, 78, 17, 18, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 31, 32, 96, 33, 37, 38, 39, 43, 44, 47, 49, 51, 52, 62, 63]}}}
instance = ../instances/kqbf/kqbf100
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 17.549000 seconds
bestProblemSolution = SolutionCost {cost: -1227, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [64, 2, 3, 68, 7, 71, 74, 10, 11, 14, 78, 17, 18, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 31, 32, 96, 33, 37, 38, 39, 43, 44, 47, 49, 51, 52, 62, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -997, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 66, 3, 68, 7, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 24, 89, 27, 93, 29, 95, 96, 36, 39, 42, 44, 51, 53, 56, 62, 63]}}}
Iteration 0: best solution: SolutionCost {cost: -1000, solutionKnapsack: {currentKnapsackWeight: 342, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 33, elements: [2, 66, 3, 68, 7, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 24, 89, 27, 93, 29, 95, 96, 39, 42, 44, 51, 53, 56, 62, 63]}}}
Iteration 1: best solution: SolutionCost {cost: -1020, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 66, 3, 68, 69, 7, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 24, 89, 27, 93, 29, 95, 96, 39, 42, 44, 51, 53, 56, 62, 63]}}}
Iteration 3: best solution: SolutionCost {cost: -1036, solutionKnapsack: {currentKnapsackWeight: 337, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [2, 66, 3, 68, 69, 7, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 24, 89, 93, 29, 95, 96, 39, 42, 44, 51, 53, 56, 57, 62, 63]}}}
Iteration 4: best solution: SolutionCost {cost: -1060, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 35, elements: [2, 66, 3, 68, 69, 7, 71, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 24, 89, 93, 29, 95, 96, 39, 42, 44, 51, 53, 56, 57, 62, 63]}}}
Iteration 5: best solution: SolutionCost {cost: -1085, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 24, 89, 93, 29, 95, 96, 39, 42, 44, 51, 53, 56, 57, 62, 63]}}}
Iteration 7: best solution: SolutionCost {cost: -1090, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 16, 17, 82, 18, 19, 84, 85, 22, 23, 24, 89, 93, 29, 95, 96, 38, 39, 42, 44, 51, 56, 57, 62, 63]}}}
Iteration 9: best solution: SolutionCost {cost: -1108, solutionKnapsack: {currentKnapsackWeight: 343, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 85, 22, 23, 24, 89, 91, 93, 29, 95, 96, 38, 39, 42, 44, 51, 56, 57, 62, 63]}}}
Iteration 10: best solution: SolutionCost {cost: -1129, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 85, 21, 22, 23, 24, 89, 91, 93, 29, 95, 96, 38, 39, 42, 44, 51, 56, 57, 62, 63]}}}
Iteration 11: best solution: SolutionCost {cost: -1146, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 85, 21, 22, 23, 24, 89, 91, 93, 29, 95, 96, 38, 39, 42, 44, 49, 51, 56, 57, 62, 63]}}}
Iteration 13: best solution: SolutionCost {cost: -1168, solutionKnapsack: {currentKnapsackWeight: 342, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 21, 22, 23, 24, 89, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 49, 51, 56, 57, 62, 63]}}}
Iteration 14: best solution: SolutionCost {cost: -1197, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 39, elements: [2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 49, 51, 56, 57, 62, 63]}}}
Iteration 16: best solution: SolutionCost {cost: -1208, solutionKnapsack: {currentKnapsackWeight: 342, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 39, elements: [2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 96, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 17: best solution: SolutionCost {cost: -1230, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 40, elements: [2, 66, 3, 68, 69, 7, 71, 9, 10, 74, 14, 78, 16, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 96, 32, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 70: best solution: SolutionCost {cost: -1232, solutionKnapsack: {currentKnapsackWeight: 342, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [2, 66, 3, 68, 69, 6, 7, 71, 9, 10, 74, 75, 14, 78, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 96, 32, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 72: best solution: SolutionCost {cost: -1245, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 41, elements: [64, 2, 66, 3, 69, 6, 7, 71, 9, 10, 74, 75, 14, 78, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 96, 32, 37, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 75: best solution: SolutionCost {cost: -1249, solutionKnapsack: {currentKnapsackWeight: 342, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 42, elements: [64, 2, 66, 3, 68, 69, 6, 7, 71, 9, 10, 74, 75, 11, 14, 78, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 96, 32, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf100
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 28.078000 seconds
bestProblemSolution = SolutionCost {cost: -1249, solutionKnapsack: {currentKnapsackWeight: 342, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 42, elements: [64, 2, 66, 3, 68, 69, 6, 7, 71, 9, 10, 74, 75, 11, 14, 78, 17, 82, 18, 84, 21, 22, 23, 24, 89, 90, 91, 93, 29, 95, 96, 32, 38, 39, 42, 44, 47, 49, 51, 57, 62, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -1024, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [64, 3, 68, 7, 74, 10, 11, 14, 80, 17, 18, 21, 85, 22, 86, 23, 24, 91, 93, 29, 30, 95, 31, 32, 33, 38, 43, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 0: best solution: SolutionCost {cost: -1040, solutionKnapsack: {currentKnapsackWeight: 325, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 33, elements: [64, 3, 68, 7, 74, 10, 11, 14, 17, 18, 21, 85, 22, 86, 23, 24, 91, 93, 29, 30, 95, 31, 32, 33, 38, 43, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 1: best solution: SolutionCost {cost: -1077, solutionKnapsack: {currentKnapsackWeight: 341, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 34, elements: [64, 3, 68, 7, 74, 10, 11, 14, 17, 18, 21, 85, 22, 86, 23, 24, 25, 91, 93, 29, 30, 95, 31, 32, 33, 38, 43, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 2: best solution: SolutionCost {cost: -1119, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 35, elements: [64, 3, 68, 7, 74, 10, 11, 14, 17, 18, 21, 85, 22, 86, 23, 24, 25, 90, 91, 93, 29, 30, 95, 31, 32, 33, 38, 43, 44, 47, 49, 51, 57, 62, 63]}}}
Iteration 4: best solution: SolutionCost {cost: -1140, solutionKnapsack: {currentKnapsackWeight: 339, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 35, elements: [64, 3, 68, 7, 74, 10, 11, 14, 17, 18, 21, 85, 22, 86, 23, 24, 25, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 43, 44, 47, 49, 51, 62, 63]}}}
Iteration 5: best solution: SolutionCost {cost: -1170, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [64, 3, 68, 7, 71, 74, 10, 11, 14, 17, 18, 21, 85, 22, 86, 23, 24, 25, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 43, 44, 47, 49, 51, 62, 63]}}}
Iteration 7: best solution: SolutionCost {cost: -1179, solutionKnapsack: {currentKnapsackWeight: 336, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [64, 2, 3, 68, 7, 71, 74, 10, 11, 14, 17, 18, 21, 85, 22, 86, 23, 24, 25, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 44, 47, 49, 51, 62, 63]}}}
Iteration 8: best solution: SolutionCost {cost: -1204, solutionKnapsack: {currentKnapsackWeight: 343, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [64, 2, 3, 68, 7, 71, 74, 10, 11, 14, 78, 17, 18, 21, 85, 22, 86, 23, 24, 25, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 44, 47, 49, 51, 62, 63]}}}
Iteration 9: best solution: SolutionCost {cost: -1225, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [64, 2, 3, 68, 69, 7, 71, 74, 10, 11, 14, 78, 17, 18, 21, 85, 22, 86, 23, 24, 25, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 44, 47, 49, 51, 62, 63]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf100
localSearch = BEST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 17.294000 seconds
bestProblemSolution = SolutionCost {cost: -1225, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 38, elements: [64, 2, 3, 68, 69, 7, 71, 74, 10, 11, 14, 78, 17, 18, 21, 85, 22, 86, 23, 24, 25, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 44, 47, 49, 51, 62, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -979, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [0, 64, 2, 67, 69, 6, 71, 7, 9, 73, 10, 75, 13, 16, 17, 20, 84, 21, 23, 88, 26, 90, 27, 91, 92, 94, 96, 33, 34, 40, 44, 45, 54, 59, 61, 63]}}}
instance = ../instances/kqbf/kqbf100
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.118000 seconds
bestProblemSolution = SolutionCost {cost: -979, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 36, elements: [0, 64, 2, 67, 69, 6, 71, 7, 9, 73, 10, 75, 13, 16, 17, 20, 84, 21, 23, 88, 26, 90, 27, 91, 92, 94, 96, 33, 34, 40, 44, 45, 54, 59, 61, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -966, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 31, elements: [2, 4, 68, 5, 70, 7, 72, 9, 10, 12, 79, 15, 16, 17, 19, 84, 85, 23, 25, 29, 96, 97, 34, 44, 47, 48, 51, 58, 61, 62, 63]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf100
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 1.041000 seconds
bestProblemSolution = SolutionCost {cost: -966, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 31, elements: [2, 4, 68, 5, 70, 7, 72, 9, 10, 12, 79, 15, 16, 17, 19, 84, 85, 23, 25, 29, 96, 97, 34, 44, 47, 48, 51, 58, 61, 62, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -850, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 33, elements: [1, 65, 2, 3, 68, 4, 69, 70, 9, 10, 74, 12, 13, 79, 16, 17, 81, 19, 84, 85, 23, 27, 30, 97, 34, 35, 36, 41, 45, 51, 53, 59, 61]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf100
localSearch = FIRST_IMPROVING
tenureRatio = 0.2
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 5.663000 seconds
bestProblemSolution = SolutionCost {cost: -850, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 33, elements: [1, 65, 2, 3, 68, 4, 69, 70, 9, 10, 74, 12, 13, 79, 16, 17, 81, 19, 84, 85, 23, 27, 30, 97, 34, 35, 36, 41, 45, 51, 53, 59, 61]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -1121, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [64, 2, 68, 69, 7, 71, 74, 10, 11, 14, 17, 18, 21, 85, 22, 23, 24, 25, 90, 91, 93, 30, 95, 31, 96, 32, 33, 38, 43, 44, 47, 49, 51, 52, 57, 62, 63]}}}
instance = ../instances/kqbf/kqbf100
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = NONE
numberOfIterations = 1000
runningTime = 0.350000 seconds
bestProblemSolution = SolutionCost {cost: -1121, solutionKnapsack: {currentKnapsackWeight: 346, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [64, 2, 68, 69, 7, 71, 74, 10, 11, 14, 17, 18, 21, 85, 22, 23, 24, 25, 90, 91, 93, 30, 95, 31, 96, 32, 33, 38, 43, 44, 47, 49, 51, 52, 57, 62, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -1128, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [64, 3, 68, 7, 71, 74, 10, 11, 14, 80, 17, 18, 21, 22, 23, 24, 89, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 39, 43, 44, 47, 49, 51, 57, 62, 63]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf100
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 1.519000 seconds
bestProblemSolution = SolutionCost {cost: -1128, solutionKnapsack: {currentKnapsackWeight: 345, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 37, elements: [64, 3, 68, 7, 71, 74, 10, 11, 14, 80, 17, 18, 21, 22, 23, 24, 89, 90, 91, 93, 29, 30, 95, 31, 32, 96, 33, 38, 39, 43, 44, 47, 49, 51, 57, 62, 63]}}}
========== END ==========




========== START ==========
initialSolution: SolutionCost {cost: -878, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 35, elements: [0, 65, 1, 2, 3, 68, 69, 9, 74, 10, 12, 13, 79, 16, 17, 84, 21, 23, 89, 27, 91, 92, 29, 94, 97, 37, 39, 41, 45, 47, 49, 51, 59, 61, 62]}}}
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Diversification by restart <<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>> Intensification by restart <<<<<<<<<<<<<<<<<<<
instance = ../instances/kqbf/kqbf100
localSearch = FIRST_IMPROVING
tenureRatio = 0.4
methodVariation = INTENSIFICATION_BY_RESTART_AND_DIVERSIFICATION_BY_RESTART
numberOfIterations = 1000
runningTime = 6.309000 seconds
bestProblemSolution = SolutionCost {cost: -878, solutionKnapsack: {currentKnapsackWeight: 344, knapsackCapacity: 346, knapsackWeights: [12, 16, 4, 2, 11, 14, 2, 15, 6, 2, 8, 2, 14, 16, 11, 14, 10, 0, 20, 14, 1, 3, 17, 11, 2, 16, 6, 19, 9, 20, 14, 17, 2, 14, 11, 17, 3, 14, 10, 15, 14, 19, 17, 14, 13, 15, 19, 7, 13, 0, 7, 6, 20, 12, 18, 10, 10, 11, 9, 16, 14, 19, 13, 6, 12, 6, 13, 5, 10, 3, 17, 7, 20, 17, 2, 6, 11, 3, 7, 10, 19, 6, 9, 1, 12, 18, 16, 7, 6, 4, 3, 13, 6, 9, 14, 7, 6, 3, 6, 9], solution: {size: 35, elements: [0, 65, 1, 2, 3, 68, 69, 9, 74, 10, 12, 13, 79, 16, 17, 84, 21, 23, 89, 27, 91, 92, 29, 94, 97, 37, 39, 41, 45, 47, 49, 51, 59, 61, 62]}}}
========== END ==========
